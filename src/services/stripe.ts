import { PaymentIntent, SetupIntent } from "@stripe/stripe-js";
import axios, { Method } from "axios";

import { Stripe as Types } from "stripe";
import { config } from "system/config";
import qs from "qs";

export { Types };

class Stripe {

  /**
   * Create a Setup Intent
   * 
   * @see https://stripe.com/docs/api/setup_intents/create
   */
  public async createSetupIntent(paymentMethodId: string): Promise<SetupIntent> {
    return this.request(
      "POST",
      "/setup_intents",
      {
        confirm: true,
        payment_method: paymentMethodId,
        usage: "off_session",
        customer: sessionStorage.getItem("customer_id") || undefined,
      },
    );
  }

  /**
   * Create a Payment Intent
   * 
   * @see https://stripe.com/docs/api/payment_intents/create
   */
  public async createPaymentIntent(amount: string, currency: string, paymentMethodId?: string): Promise<PaymentIntent> {
    const customerId = sessionStorage.getItem("customer_id");
    const payload: Dictionary = {
      amount: Math.round(100 * parseFloat(amount.replace(/[$,]/g, ""))),
      currency,
      confirm: true,
      setup_future_usage: "off_session",
    };
    if (customerId) {
      payload.customer = customerId;
    }
    if (paymentMethodId) {
      payload.payment_method = paymentMethodId;
    }
    return this.request(
      "POST",
      "/payment_intents",
      payload,
    );
  }

  /**
   * Confirm a Payment Intent
   * 
   * @see https://stripe.com/docs/api/payment_intents/confirm
   */
  public async confirmPaymentIntent(paymentIntentId: string): Promise<PaymentIntent> {
    return this.request(
      "POST",
      `/payment_intents/${paymentIntentId}/confirm`,
    );
  }

  /**
   * List customers on Stripe
   * 
   * @see https://stripe.com/docs/api/customers/list
   */
  public async listCustomers(limit = 20): Promise<Types.Customer[]> {
    const request = await this.request(
      "GET",
      "/customers",
      { limit },
    );
    return request.data || [];
  }

  /**
   * Create a new customer on Stripe
   * 
   * @see https://stripe.com/docs/api/customers/create
   */
  public async createCustomer(firstName: string, lastName: string, email: string): Promise<Types.Customer> {
    return this.request(
      "POST",
      "/customers",
      {
        name: `${firstName} ${lastName}`,
        email,
        description: "Random customer generated by billin.io Stripe Utility.",
      },
    );
  }

  /**
   * Send the request to Stripe
   */
  private async request(method: Method, endpoint: string, data?: Dictionary) {
    try {
      const request = await axios({
        method,
        url: `https://api.stripe.com/v1${endpoint}`,
        data: data && qs.stringify(data) || undefined,
        headers: {
          Authorization: `Bearer ${config.stripe.secretKey}`,
          "content-type": "application/x-www-form-urlencoded",
        },
      });
      return request.data;
    } catch (error) {
      throw new Error(error.response.data.error.message || "Unknown error occurred on Stripe.");
    }
  }

}

export const stripe = new Stripe();
